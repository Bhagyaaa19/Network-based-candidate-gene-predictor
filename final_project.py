#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 31, 2024 03:06:04 PM IST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from contextlib import redirect_stdout
from tkinter import messagebox
from io import StringIO
from tkinter.constants import *
import os.path
import tkinter.filedialog

_location = os.path.dirname(__file__)

import final_project_support
import script

_bgcolor = 'black'
_fgcolor = 'white'
_tabfg1 = 'black'
_tabfg2 = 'white'
_bgmode = 'light'
_tabbg1 = '#d9d9d9'
_tabbg2 = 'gray40'

_style_code_ran = 0


def _style_code():
    global _style_code_ran
    if _style_code_ran: return
    try:
        final_project_support.root.tk.call('source',
                                           os.path.join(_location, 'themes', 'page-dark.tcl'))
    except:
        pass
    style = ttk.Style()
    style.theme_use('page-dark')
    style.configure('.', font="TkDefaultFont")
    _style_code_ran = 1


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("601x450+287+156")
        top.minsize(120, 1)
        top.maxsize(1284, 701)
        top.resizable(1, 1)
        top.title("Gene Predictor")
        top.configure(background="black")
        top.configure(highlightbackground="black")
        top.configure(highlightcolor="white")

        # Add instance variables to store file paths
        self.interaction_file = ""
        self.seed_file = ""

        self.top = top
        self.selectedAlgorithm = tk.IntVar()
        self.selectedSingleOrMultiple = tk.IntVar()

        _style_code()
        self.TButton2 = ttk.Button(self.top, command=self.choose_interaction_file)
        self.TButton2.place(relx=0.767, rely=0.287, height=26, width=85)
        self.TButton2.configure(text='''Choose file''')
        self.TButton2.configure(compound='left')
        self.TButton2.configure(cursor="fleur")
        self.TButton2_tooltip = \
            ToolTip(self.TButton2, '''Click to select a file from computer''')

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.116, rely=0.289, height=21, width=194)
        self.Label2.configure(activebackground="#d9d9d9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#000080")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#3f3f3f")
        self.Label2.configure(font="-family {Segoe UI} -size 9")
        self.Label2.configure(foreground="white")
        self.Label2.configure(highlightbackground="black")
        self.Label2.configure(highlightcolor="white")
        self.Label2.configure(text='''Upload protein interactions file (.tsv)''')

        self.Label2_1_1 = tk.Label(self.top)
        self.Label2_1_1.place(relx=0.116, rely=0.42, height=21, width=194)
        self.Label2_1_1.configure(activebackground="#d9d9d9")
        self.Label2_1_1.configure(activeforeground="black")
        self.Label2_1_1.configure(anchor='w')
        self.Label2_1_1.configure(background="#000080")
        self.Label2_1_1.configure(compound='left')
        self.Label2_1_1.configure(disabledforeground="#3f3f3f")
        self.Label2_1_1.configure(font="-family {Segoe UI} -size 9")
        self.Label2_1_1.configure(foreground="white")
        self.Label2_1_1.configure(highlightbackground="black")
        self.Label2_1_1.configure(highlightcolor="white")
        self.Label2_1_1.configure(text='''Upload seed protein file (.txt)''')

        self.Radiobutton1_1 = tk.Radiobutton(self.top)
        self.Radiobutton1_1.place(relx=0.517, rely=0.582, relheight=0.056
                                  , relwidth=0.231)
        self.Radiobutton1_1.configure(activebackground="#d9d9d9")
        self.Radiobutton1_1.configure(activeforeground="black")
        self.Radiobutton1_1.configure(selectcolor="black")
        self.Radiobutton1_1.configure(anchor='w')
        self.Radiobutton1_1.configure(background="black")
        self.Radiobutton1_1.configure(compound='left')
        self.Radiobutton1_1.configure(disabledforeground="#3f3f3f")
        self.Radiobutton1_1.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Radiobutton1_1.configure(foreground="white")
        self.Radiobutton1_1.configure(highlightbackground="black")
        self.Radiobutton1_1.configure(highlightcolor="white")
        self.Radiobutton1_1.configure(justify='left')
        self.Radiobutton1_1.configure(text='''Hishigaki Algorithm''')
        self.Radiobutton1_1.configure(variable=self.selectedAlgorithm, value=2)

        self.Radiobutton1 = tk.Radiobutton(self.top)
        self.Radiobutton1.place(relx=0.517, rely=0.538, relheight=0.056
                                , relwidth=0.298)
        self.Radiobutton1.configure(activebackground="#d9d9d9")
        self.Radiobutton1.configure(activeforeground="black")
        self.Radiobutton1.configure(selectcolor="black")
        self.Radiobutton1.configure(anchor='w')
        self.Radiobutton1.configure(background="black")
        self.Radiobutton1.configure(compound='left')
        self.Radiobutton1.configure(disabledforeground="#3f3f3f")
        self.Radiobutton1.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Radiobutton1.configure(foreground="white")
        self.Radiobutton1.configure(highlightbackground="black")
        self.Radiobutton1.configure(highlightcolor="white")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''Majority Voting Algorithm''')
        self.Radiobutton1.configure(variable=self.selectedAlgorithm, value=1)

        self.TButton3 = ttk.Button(self.top, command=self.predict_candidates)
        self.TButton3.place(relx=0.449, rely=0.822, height=26, width=165)
        self.TButton3.configure(text='''Predict candidate genes''')
        self.TButton3.configure(compound='left')

        self.TButton2_1 = ttk.Button(self.top, command=self.choose_seed_file)
        self.TButton2_1.place(relx=0.767, rely=0.418, height=26, width=85)
        self.TButton2_1.configure(text='''Choose file''')
        self.TButton2_1.configure(compound='left')
        self.TButton2_1.configure(cursor="fleur")
        self.TButton2_1_tooltip = \
            ToolTip(self.TButton2_1, '''Click to select a file from computer''')

        self.Radiobutton1_2 = tk.Radiobutton(self.top)
        self.Radiobutton1_2.place(relx=0.517, rely=0.664, relheight=0.056
                                  , relwidth=0.298)
        self.Radiobutton1_2.configure(activebackground="#d9d9d9")
        self.Radiobutton1_2.configure(activeforeground="black")
        self.Radiobutton1_2.configure(selectcolor="black")
        self.Radiobutton1_2.configure(anchor='w')
        self.Radiobutton1_2.configure(background="black")
        self.Radiobutton1_2.configure(compound='left')
        self.Radiobutton1_2.configure(disabledforeground="#3f3f3f")
        self.Radiobutton1_2.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Radiobutton1_2.configure(foreground="white")
        self.Radiobutton1_2.configure(highlightbackground="black")
        self.Radiobutton1_2.configure(highlightcolor="white")
        self.Radiobutton1_2.configure(justify='left')
        self.Radiobutton1_2.configure(text='''Single function''')
        self.Radiobutton1_2.configure(variable=self.selectedSingleOrMultiple, value=1)

        self.menubar = tk.Menu(top, font="TkMenuFont", bg='black', fg='white')
        top.configure(menu=self.menubar)

        self.Radiobutton1_2_1 = tk.Radiobutton(self.top)
        self.Radiobutton1_2_1.place(relx=0.517, rely=0.709, relheight=0.056
                                    , relwidth=0.298)
        self.Radiobutton1_2_1.configure(activebackground="#d9d9d9")
        self.Radiobutton1_2_1.configure(activeforeground="black")
        self.Radiobutton1_2_1.configure(selectcolor="black")
        self.Radiobutton1_2_1.configure(anchor='w')
        self.Radiobutton1_2_1.configure(background="black")
        self.Radiobutton1_2_1.configure(compound='left')
        self.Radiobutton1_2_1.configure(disabledforeground="#3f3f3f")
        self.Radiobutton1_2_1.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Radiobutton1_2_1.configure(foreground="white")
        self.Radiobutton1_2_1.configure(highlightbackground="black")
        self.Radiobutton1_2_1.configure(highlightcolor="white")
        self.Radiobutton1_2_1.configure(justify='left')
        self.Radiobutton1_2_1.configure(text='''Multiple functions''')
        self.Radiobutton1_2_1.configure(variable=self.selectedSingleOrMultiple, value=2)

        self.Entry1_1 = tk.Entry(self.top)
        self.Entry1_1.place(relx=0.468, rely=0.422, height=20, relwidth=0.29)
        self.Entry1_1.configure(background="#c0c0c0")
        self.Entry1_1.configure(disabledforeground="#3f3f3f")
        self.Entry1_1.configure(font="-family {Courier New} -size 10")
        self.Entry1_1.configure(foreground="black")
        self.Entry1_1.configure(highlightbackground="black")
        self.Entry1_1.configure(highlightcolor="white")
        self.Entry1_1.configure(insertbackground="white")
        self.Entry1_1.configure(selectbackground="#d9d9d9")
        self.Entry1_1.configure(selectforeground="black")

        self.Label3 = tk.Label(self.top)
        self.Label3.place(relx=0.75, rely=0.933, height=31, width=204)
        self.Label3.configure(activebackground="#d9d9d9")
        self.Label3.configure(activeforeground="#ffffff")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="black")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#3f3f3f")
        self.Label3.configure(font="-family {Segoe UI} -size 9 -slant italic")
        self.Label3.configure(foreground="#ffffff")
        self.Label3.configure(highlightbackground="black")
        self.Label3.configure(highlightcolor="white")
        self.Label3.configure(text='''Bhagya Wijeratne - 15219''')

        self.Label2_1_2 = tk.Label(self.top)
        self.Label2_1_2.place(relx=0.115, rely=0.691, height=21, width=194)
        self.Label2_1_2.configure(activebackground="#d9d9d9")
        self.Label2_1_2.configure(activeforeground="black")
        self.Label2_1_2.configure(anchor='w')
        self.Label2_1_2.configure(background="#000080")
        self.Label2_1_2.configure(compound='left')
        self.Label2_1_2.configure(disabledforeground="#3f3f3f")
        self.Label2_1_2.configure(font="-family {Segoe UI} -size 9")
        self.Label2_1_2.configure(foreground="white")
        self.Label2_1_2.configure(highlightbackground="black")
        self.Label2_1_2.configure(highlightcolor="white")
        self.Label2_1_2.configure(text='''Single function /  Multiple function''')

        self.Label2_1 = tk.Label(self.top)
        self.Label2_1.place(relx=0.116, rely=0.558, height=21, width=194)
        self.Label2_1.configure(activebackground="#d9d9d9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(anchor='w')
        self.Label2_1.configure(background="#000080")
        self.Label2_1.configure(compound='left')
        self.Label2_1.configure(disabledforeground="#3f3f3f")
        self.Label2_1.configure(font="-family {Segoe UI} -size 9")
        self.Label2_1.configure(foreground="#ffffff")
        self.Label2_1.configure(highlightbackground="black")
        self.Label2_1.configure(highlightcolor="white")
        self.Label2_1.configure(text='''Choose Algorithm''')

        self.Entry1 = tk.Entry(self.top)
        self.Entry1.place(relx=0.468, rely=0.289, height=20, relwidth=0.29)
        self.Entry1.configure(background="#c0c0c0")
        self.Entry1.configure(disabledforeground="#3f3f3f")
        self.Entry1.configure(font="-family {Courier New} -size 10")
        self.Entry1.configure(foreground="black")
        self.Entry1.configure(highlightbackground="black")
        self.Entry1.configure(highlightcolor="white")
        self.Entry1.configure(insertbackground="white")
        self.Entry1.configure(selectbackground="#d9d9d9")
        self.Entry1.configure(selectforeground="black")

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.12, rely=0.111, height=51, width=460)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(activeforeground="#80ffff")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#004080")
        self.Label1.configure(compound='center')
        self.Label1.configure(disabledforeground="#3f3f3f")
        self.Label1.configure(font="-family {Trebuchet MS} -size 17 -weight bold")
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(highlightbackground="black")
        self.Label1.configure(highlightcolor="white")
        self.Label1.configure(text=' Network based candidate gene predictor')

    def choose_interaction_file(self):
        # Function to choose protein interaction file
        self.interaction_file = tkinter.filedialog.askopenfilename()
        self.Entry1.delete(0, tk.END)  # Clear existing text
        self.Entry1.insert(tk.END, self.interaction_file)
        return self.interaction_file

    def choose_seed_file(self):
        # Function to choose seed protein file
        self.seed_file = tkinter.filedialog.askopenfilename()
        self.Entry1_1.delete(0, tk.END)  # Clear existing text
        self.Entry1_1.insert(tk.END, self.seed_file)
        return self.seed_file

    # def popup1(self, event, *args, **kwargs):
    #     self.Popupmenu1 = tk.Menu(self.top, tearoff=0)
    #     self.Popupmenu1.configure(background=_bgcolor)
    #     self.Popupmenu1.configure(foreground=_fgcolor)
    #     self.Popupmenu1.configure(font="-family {Segoe UI} -size 9")
    #     self.Popupmenu1.post(event.x_root, event.y_root)
    #
    def open_toplevel2(self, selected_algorithm, selected_functionType, network, candidate_genes, output_functions):
        # Create and display Toplevel2 only when Predict Candidates button is clicked
        top2 = tk.Toplevel(self.top)
        w2 = Toplevel2(top2, self.top, selected_algorithm, selected_functionType, network, candidate_genes,
                       output_functions)

    def predict_candidates(self):

            # Function to predict candidates
        try:
            # Function to predict candidates
            if not self.interaction_file or not self.seed_file:
                # Ensure both files are selected
                messagebox.showerror("Error", "Please select both files")
                return
            elif not self.selectedAlgorithm:
                # Ensure that an Algorithm is selected
                messagebox.showerror("Error", "Please select the Algorithm")
                return
            elif not self.selectedSingleOrMultiple:
                # Ensure that single or multiple function prediction option is selected
                messagebox.showerror("Error", "Please select Single/ Multiple function")
                return
            # Get the selected algorithm
            selected_algorithm = self.selectedAlgorithm.get()
            selected_functionType = self.selectedSingleOrMultiple.get()

            # Create an instance of the Network class
            network = script.Network(self.interaction_file)
            # Perform prediction using selected files and algorithm
            # Majority voting with single function
            if selected_algorithm == 1 and selected_functionType == 1:
                # Call the gene_predict_single_function method on the instance
                # and pass the seed_file as the argument for known_proteins_file
                candidate_genes = network.gene_predict_single_function(self.seed_file)
                output_functions = None

            # Majority voting with multiple functions
            elif selected_algorithm == 1 and selected_functionType == 2:
                candidate_genes = network.gene_predict_multiple_function(self.seed_file)
                output_functions = network.function_predict_multiple_function(self.seed_file)

            # Hishigaki with single function
            elif selected_algorithm == 2 and selected_functionType == 1:
                candidate_genes = network.gene_predict_single_function_Hishigaki(self.seed_file)
                output_functions = None
            # Hishigaki with multiple functions
            elif selected_algorithm == 2 and selected_functionType == 2:
                candidate_genes = network.gene_predict_multiple_function_Hishigaki(self.seed_file)
                output_functions = network.function_predict_multiple_function_Hishigaki(self.seed_file)

            # Minimize Toplevel1 instead of destroying it
            self.top.withdraw()

            # After prediction, open toplevel 2
            self.open_toplevel2(selected_algorithm, selected_functionType, network, candidate_genes, output_functions)
            return

        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")

class Toplevel2:
    def __init__(self, top=None, toplevel1=None, selected_algorithm=None, selected_functionType=None, network=None,
                 candidate_genes=None, output_functions=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x451+293+124")
        top.minsize(120, 1)
        top.maxsize(1284, 701)
        top.resizable(1, 1)
        top.title("Results Page")
        top.configure(background="black")
        top.configure(highlightbackground="black")
        top.configure(highlightcolor="white")

        self.top = top
        self.toplevel1 = toplevel1
        self.selected_algorithm = selected_algorithm
        self.selected_functionType = selected_functionType
        self.network = network
        self.candidate_genes = candidate_genes
        self.output_functions = output_functions

        _style_code()
        self.TLabel1_1 = ttk.Label(self.top)
        self.TLabel1_1.place(relx=0.083, rely=0.111, height=39, width=235)
        self.TLabel1_1.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.TLabel1_1.configure(relief="flat")
        self.TLabel1_1.configure(anchor='w')
        self.TLabel1_1.configure(justify='left')
        self.TLabel1_1.configure(text='''Single/ Multiple functions:''')
        self.TLabel1_1.configure(compound='left')

        self.Message1_1 = tk.Message(self.top)
        self.Message1_1.place(relx=0.467, rely=0.133, relheight=0.042
                              , relwidth=0.233)
        self.Message1_1.configure(background="#ffffff")
        self.Message1_1.configure(font="-family {Segoe UI} -size 9")
        self.Message1_1.configure(foreground="black")
        self.Message1_1.configure(highlightbackground="black")
        self.Message1_1.configure(highlightcolor="white")
        self.Message1_1.configure(padx="1")
        self.Message1_1.configure(pady="1")
        self.Message1_1.configure(width=140)

        # Update the text in the message box with the selected function type
        if self.selected_functionType == 1:
            self.Message1_1.configure(text="Single function")
        elif self.selected_functionType == 2:
            self.Message1_1.configure(text="Multiple function")

        self.Button1_1 = tk.Button(self.top, command=self.predictFunction)
        self.Button1_1.place(relx=0.55, rely=0.557, height=26, width=217)
        self.Button1_1.configure(activebackground="#d9d9d9")
        self.Button1_1.configure(activeforeground="black")
        self.Button1_1.configure(background="#004080")
        # self.Button1_1.configure(command=final_project_support.Show candidate genes)
        self.Button1_1.configure(disabledforeground="#3f3f3f")
        self.Button1_1.configure(font="-family {Segoe UI} -size 9")
        self.Button1_1.configure(foreground="#ffffff")
        self.Button1_1.configure(highlightbackground="black")
        self.Button1_1.configure(highlightcolor="white")
        self.Button1_1.configure(text='''Predict functions for unknown proteins''')

        self.Button1 = tk.Button(self.top, command=self.update_candidates)
        self.Button1.place(relx=0.083, rely=0.557, height=26, width=187)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="black")
        self.Button1.configure(background="#004080")
        # self.Button1.configure(command=final_project_support.Show candidate genes)
        self.Button1.configure(disabledforeground="#3f3f3f")
        self.Button1.configure(font="-family {Segoe UI} -size 9")
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(highlightbackground="black")
        self.Button1.configure(highlightcolor="white")
        self.Button1.configure(text='''Show candidate genes''')

        self.TSeparator1 = ttk.Separator(self.top)
        self.TSeparator1.place(relx=0.083, rely=0.244, relwidth=0.867)

        self.TLabel1_1_1 = ttk.Label(self.top)
        self.TLabel1_1_1.place(relx=0.083, rely=0.044, height=39, width=105)
        self.TLabel1_1_1.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.TLabel1_1_1.configure(relief="flat")
        self.TLabel1_1_1.configure(anchor='w')
        self.TLabel1_1_1.configure(justify='left')
        self.TLabel1_1_1.configure(text='''Algorithm:''')
        self.TLabel1_1_1.configure(compound='left')

        self.Message1_1_1 = tk.Message(self.top)
        self.Message1_1_1.place(relx=0.267, rely=0.067, relheight=0.042
                                , relwidth=0.433)
        self.Message1_1_1.configure(background="#ffffff")
        self.Message1_1_1.configure(font="-family {Segoe UI} -size 9")
        self.Message1_1_1.configure(foreground="black")
        self.Message1_1_1.configure(highlightbackground="black")
        self.Message1_1_1.configure(highlightcolor="white")
        self.Message1_1_1.configure(padx="1")
        self.Message1_1_1.configure(pady="1")
        self.Message1_1_1.configure(width=260)

        # Update the text in the message box with the selected algorithm
        if self.selected_algorithm == 1:
            self.Message1_1_1.configure(text="Majority Voting Algorithm")
        elif self.selected_algorithm == 2:
            self.Message1_1_1.configure(text="Hishigaki Algorithm")

        self.Scrolledtext1 = ScrolledText(self.top)
        self.Scrolledtext1.place(relx=0.1, rely=0.643, relheight=0.297
                                 , relwidth=0.837)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="black")
        self.Scrolledtext1.configure(highlightcolor="white")
        self.Scrolledtext1.configure(insertbackground="white")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#d9d9d9")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="none")

        self.Button2 = tk.Button(self.top, command=self.mainMenu)
        self.Button2.place(relx=0.8, rely=0.067, height=26, width=87)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="black")
        self.Button2.configure(background="#80ffff")
        self.Button2.configure(disabledforeground="#3f3f3f")
        self.Button2.configure(font="-family {Segoe UI} -size 9")
        self.Button2.configure(foreground="#004080")
        self.Button2.configure(highlightbackground="black")
        self.Button2.configure(highlightcolor="white")
        self.Button2.configure(text='''Main Menu''')

        self.TLabel1_1_2 = ttk.Label(self.top)
        self.TLabel1_1_2.place(relx=0.1, rely=0.31, height=39, width=245)
        self.TLabel1_1_2.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.TLabel1_1_2.configure(relief="flat")
        self.TLabel1_1_2.configure(anchor='w')
        self.TLabel1_1_2.configure(justify='left')
        self.TLabel1_1_2.configure(text='''No. of proteins in the network:''')
        self.TLabel1_1_2.configure(compound='left')

        self.TLabel1_1_2_1_1 = ttk.Label(self.top)
        self.TLabel1_1_2_1_1.place(relx=0.1, rely=0.399, height=39, width=275)
        self.TLabel1_1_2_1_1.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.TLabel1_1_2_1_1.configure(relief="flat")
        self.TLabel1_1_2_1_1.configure(anchor='w')
        self.TLabel1_1_2_1_1.configure(justify='left')
        self.TLabel1_1_2_1_1.configure(text='''No. of interactions in the network:''')
        self.TLabel1_1_2_1_1.configure(compound='left')

        self.Message1_1_2_1_1 = tk.Message(self.top)
        self.Message1_1_2_1_1.place(relx=0.583, rely=0.421, relheight=0.042
                                    , relwidth=0.1)
        self.Message1_1_2_1_1.configure(background="#ffffff")
        self.Message1_1_2_1_1.configure(font="-family {Segoe UI} -size 9")
        self.Message1_1_2_1_1.configure(foreground="black")
        self.Message1_1_2_1_1.configure(highlightbackground="black")
        self.Message1_1_2_1_1.configure(highlightcolor="white")
        self.Message1_1_2_1_1.configure(padx="1")
        self.Message1_1_2_1_1.configure(pady="1")
        self.Message1_1_2_1_1.configure(width=60)
        self.Message1_1_2_1_1.configure(text=network.n_interactions)

        self.Message1_1_2 = tk.Message(self.top)
        self.Message1_1_2.place(relx=0.583, rely=0.333, relheight=0.042
                                , relwidth=0.1)
        self.Message1_1_2.configure(background="#ffffff")
        self.Message1_1_2.configure(font="-family {Segoe UI} -size 9")
        self.Message1_1_2.configure(foreground="black")
        self.Message1_1_2.configure(highlightbackground="black")
        self.Message1_1_2.configure(highlightcolor="white")
        self.Message1_1_2.configure(padx="1")
        self.Message1_1_2.configure(pady="1")
        self.Message1_1_2.configure(width=60)
        self.Message1_1_2.configure(text=network.n_proteins)

    def popup1(self, event, *args, **kwargs):
        self.Popupmenu2 = tk.Menu(self.top, tearoff=0)
        self.Popupmenu2.configure(background=_bgcolor)
        self.Popupmenu2.configure(foreground=_fgcolor)
        self.Popupmenu2.configure(font="-family {Segoe UI} -size 9")
        self.Popupmenu2.post(event.x_root, event.y_root)

    def update_candidates(self):
        if self.candidate_genes:
            self.Scrolledtext1.delete(1.0, tk.END)  # Clear previous content
            self.Scrolledtext1.insert(tk.END, self.candidate_genes)
        else:
            self.Scrolledtext1.delete(1.0, tk.END)
            self.Scrolledtext1.insert(tk.END, "No candidate genes found.")

    def predictFunction(self):
        if self.output_functions:
            self.Scrolledtext1.delete(1.0, tk.END)  # Clear previous content
            self.Scrolledtext1.insert(tk.END, self.output_functions)
        else:
            self.Scrolledtext1.delete(1.0, tk.END)
            self.Scrolledtext1.insert(tk.END, "Cannot predict function.")

    def mainMenu(self):
        # Minimize toplevel2
        self.top.withdraw()

        # Deiconify toplevel1 to bring it back into view
        self.toplevel1.deiconify()


from time import time, localtime, strftime


class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """

    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                              fg=_fgcolor, font="TkDefaultFont",
                              aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        self.msgVar.set(msg)

    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg  # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)


#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


def start_up():
    final_project_support.main()


if __name__ == '__main__':
    final_project_support.main()
